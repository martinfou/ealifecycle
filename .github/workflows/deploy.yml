name: Deploy to Dreamhost

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch: # Allow manual deployment

jobs:
  run-tests:
    name: Run PHPUnit Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        coverage: none

    - name: Get Composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Setup test database
      run: |
        touch database/database.sqlite
        cp .env.example .env
        php artisan key:generate
        php artisan migrate --force

    - name: Delete SQLite test database
      run: |
        if [ -f database/database.sqlite ]; then
          rm database/database.sqlite
        fi

    - name: Create SQLite test database
      run: touch database/database.sqlite

    - name: Run migrations
      run: php artisan migrate --force

    - name: Clear Laravel caches and regenerate autoload
      run: |
        php artisan config:clear
        php artisan cache:clear
        composer dump-autoload

    - name: Run tests
      run: vendor/bin/phpunit

  validate-composer:
    name: Validate composer.lock
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        coverage: none
        
    - name: Get Composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
          
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Validate composer.lock is up-to-date
      run: |
        composer validate --no-check-all --strict
        git diff --exit-code -- composer.lock

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [run-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, openssl, zip, unzip
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install PHP dependencies
      run: composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist
      
    - name: Install Node dependencies
      run: npm ci
      
    - name: Build assets
      run: npm run build
      
    - name: Prepare deployment package
      run: |
        # Create staging directory for deployment
        mkdir -p deploy-staging
        
        # Copy files to staging, excluding development files
        rsync -av --progress . deploy-staging/ \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='.env' \
          --exclude='.env.production' \
          --exclude='.env.example' \
          --exclude='.env.local' \
          --exclude='.env.*.local' \
          --exclude='tests' \
          --exclude='storage/logs/*' \
          --exclude='storage/framework/cache/*' \
          --exclude='storage/framework/sessions/*' \
          --exclude='storage/framework/views/*' \
          --exclude='storage/app/public/*' \
          --exclude='README.md' \
          --exclude='CHANGELOG.md' \
          --exclude='TODO.md' \
          --exclude='phpunit.xml' \
          --exclude='.phpunit.cache' \
          --exclude='*.log' \
          --exclude='*.tmp' \
          --exclude='.DS_Store' \
          --exclude='Thumbs.db' \
          --exclude='deploy-staging'
        
        # Create tar archive from staging directory  
        tar -czf deploy.tar.gz -C deploy-staging .
          
    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        source: "deploy.tar.gz"
        target: "${{ secrets.DREAMHOST_PATH }}"
        strip_components: 0

    - name: Deploy to Dreamhost via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        script: |
          # Navigate to your domain directory
          cd ${{ secrets.DREAMHOST_PATH }}
          
          # Verify deployment package exists
          if [ ! -f "deploy.tar.gz" ]; then
            echo "Error: deploy.tar.gz not found!"
            exit 1
          fi
          
          # Backup environment files before deployment
          if [ -f "ealifecycle/.env.production" ]; then
            echo "Backing up .env.production"
            cp ealifecycle/.env.production /tmp/env-production-backup
          fi
          
          if [ -f "ealifecycle/.env" ]; then
            echo "Backing up .env"
            cp ealifecycle/.env /tmp/env-backup
          fi
          
          # Create backup of current deployment with timestamp
          echo "Creating backup of current deployment..."
          if [ -d "ealifecycle" ]; then
            BACKUP_NAME="ealifecycle-backup-$(date +%Y%m%d-%H%M%S)"
            tar -czf "${BACKUP_NAME}.tar.gz" ealifecycle
            
            # Keep only the last 5 backups
            ls -t ealifecycle-backup-*.tar.gz | tail -n +6 | xargs -r rm
          fi
          
          # Extract new deployment
          echo "Extracting new deployment..."
          rm -rf ealifecycle
          mkdir -p ealifecycle
          tar -xzf deploy.tar.gz -C ealifecycle
          
          # Restore environment files from backup
          echo "Restoring environment files from backup..."
          if [ -f "${BACKUP_NAME}.tar.gz" ]; then
            tar -xzf "${BACKUP_NAME}.tar.gz" ealifecycle/.env.production ealifecycle/.env
            mv ealifecycle/.env.production ealifecycle/.env
            rm "${BACKUP_NAME}.tar.gz"
          fi
          
          # Set proper permissions
          echo "Setting permissions..."
          chmod -R 775 ealifecycle/storage
          chmod -R 775 ealifecycle/bootstrap/cache
          
          # Update APP_URL in .env
          echo "Updating APP_URL..."
          sed -i 's|APP_URL=.*|APP_URL=https://4xhacker.com/ealifecycle|' ealifecycle/.env
          
          # Clear Laravel caches
          echo "Clearing Laravel caches..."
          cd ealifecycle
          php artisan optimize:clear
          php artisan config:clear
          php artisan route:clear
          php artisan view:clear
          php artisan cache:clear
          
          # Verify deployment
          echo "Verifying deployment..."
          if [ ! -f "public/index.php" ]; then
            echo "Error: public/index.php not found after deployment!"
            exit 1
          fi
          
          # Clean up
          echo "Cleaning up..."
          cd ..
          rm -f deploy.tar.gz
          
          echo "Deployment completed successfully!" 