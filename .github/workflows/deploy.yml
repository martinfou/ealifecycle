name: Deploy to Dreamhost

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch: # Allow manual deployment

jobs:
  run-tests:
    name: Run PHPUnit Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        coverage: none

    - name: Get Composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Setup test database
      run: |
        touch database/database.sqlite
        cp .env.example .env
        php artisan key:generate
        php artisan migrate --force

    - name: Run tests
      run: vendor/bin/phpunit

  validate-composer:
    name: Validate composer.lock
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        coverage: none
        
    - name: Get Composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
          
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Validate composer.lock is up-to-date
      run: |
        composer validate --no-check-all --strict
        git diff --exit-code -- composer.lock

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [run-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: prod  # Use the prod environment to access secrets
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, openssl, zip, unzip
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install PHP dependencies
      run: composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist
      
    - name: Install Node dependencies
      run: npm ci
      
    - name: Build assets
      run: npm run build
      
    - name: Prepare deployment package
      run: |
        # Create staging directory for deployment
        mkdir -p deploy-staging
        
        # Copy files to staging, excluding development files
        rsync -av --progress . deploy-staging/ \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='.env' \
          --exclude='.env.production' \
          --exclude='.env.example' \
          --exclude='.env.local' \
          --exclude='.env.*.local' \
          --exclude='tests' \
          --exclude='storage/logs/*' \
          --exclude='storage/framework/cache/*' \
          --exclude='storage/framework/sessions/*' \
          --exclude='storage/framework/views/*' \
          --exclude='storage/app/public/*' \
          --exclude='README.md' \
          --exclude='CHANGELOG.md' \
          --exclude='TODO.md' \
          --exclude='phpunit.xml' \
          --exclude='.phpunit.cache' \
          --exclude='*.log' \
          --exclude='*.tmp' \
          --exclude='.DS_Store' \
          --exclude='Thumbs.db' \
          --exclude='deploy-staging'
          # DO NOT exclude vendor directory so production always has dependencies
        
        # List contents to verify everything is there
        echo "=== Contents of deploy-staging ==="
        ls -la deploy-staging/
        
        # Create tar archive from staging directory  
        tar -czf deploy.tar.gz -C deploy-staging .
        
        # Verify tar contents
        echo "=== Contents of deploy.tar.gz ==="
        tar -tzf deploy.tar.gz | head -20
          
    - name: Deploy to Dreamhost via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        script: |
          # Navigate to your domain directory
          cd ${{ secrets.DREAMHOST_PATH }}
          
          # Backup environment files before deployment
          if [ -f "ealifecycle/.env.production" ]; then
            echo "Backing up .env.production"
            cp ealifecycle/.env.production /tmp/env-production-backup
          fi
          
          if [ -f "ealifecycle/.env" ]; then
            echo "Backing up .env"
            cp ealifecycle/.env /tmp/env-backup
          fi
          
          # Create backup of current deployment
          if [ -d "ealifecycle" ]; then
            rm -rf ealifecycle-backup
            mv ealifecycle ealifecycle-backup
          fi
          
          # Create new deployment directory
          mkdir -p ealifecycle
          
    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        source: "deploy.tar.gz"
        target: "${{ secrets.DREAMHOST_PATH }}/ealifecycle/"
        
    - name: Extract and configure application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        script: |
          cd ${{ secrets.DREAMHOST_PATH }}/ealifecycle
          
          # Check and use PHP 8.4 if available on Dreamhost
          if command -v php8.4 &> /dev/null; then
            export PHP_BINARY=php8.4
            echo "Using PHP 8.4"
          elif command -v php8.3 &> /dev/null; then
            export PHP_BINARY=php8.3
            echo "Using PHP 8.3"
          elif command -v php8.2 &> /dev/null; then
            export PHP_BINARY=php8.2
            echo "Using PHP 8.2"
          else
            export PHP_BINARY=php
            echo "Using default PHP version"
          fi
          
          # Check PHP version meets requirements
          $PHP_BINARY -v
          
          # Extract deployment package
          echo "=== Extracting deployment package ==="
          tar -xzf deploy.tar.gz
          rm deploy.tar.gz

          # Remove any old built assets to prevent cache issues
          rm -rf public/build public/dist

          # Install Node dependencies and rebuild assets on the server
          if command -v npm &> /dev/null; then
            npm ci
            npm run build
          fi
          
          # Verify extraction worked correctly
          echo "=== Verifying extracted files ==="
          ls -la
          echo "=== Checking for Laravel directories ==="
          ls -la app/ config/ database/ 2>/dev/null || echo "ERROR: Laravel directories not found!"
          
          # Ensure we have a proper Laravel application structure
          if [ ! -d "app" ] || [ ! -d "config" ] || [ ! -d "database" ] || [ ! -f "artisan" ]; then
            echo "ERROR: Laravel application structure not found. Deployment failed!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "✅ Laravel application structure verified successfully"
          
          # Restore environment files from backup
          if [ -f "/tmp/env-production-backup" ]; then
            echo "Restoring .env.production from backup"
            cp /tmp/env-production-backup .env.production
            rm /tmp/env-production-backup
          fi
          
          if [ -f "/tmp/env-backup" ]; then
            echo "Restoring .env from backup"
            cp /tmp/env-backup .env
            rm /tmp/env-backup
          else
            # Only create .env from .env.production if no existing .env was backed up
            if [ -f ".env.production" ]; then
              echo "Creating .env from .env.production"
              cp .env.production .env
            else
              echo "WARNING: No .env.production file found for environment setup"
            fi
          fi
          
          # Update Sanctum and CORS configuration in .env
          echo "Updating Sanctum and CORS configuration..."
          if [ -f ".env" ]; then
            # Remove existing Sanctum and CORS settings if they exist
            sed -i '/^SANCTUM_STATEFUL_DOMAINS=/d' .env
            sed -i '/^SESSION_DOMAIN=/d' .env
            sed -i '/^CORS_ALLOWED_ORIGINS=/d' .env
            
            # Add new Sanctum and CORS settings
            echo "" >> .env
            echo "# Sanctum and CORS Configuration" >> .env
            echo "SANCTUM_STATEFUL_DOMAINS=localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1,4xhacker.com,ealifecycle.4xhacker.com" >> .env
            echo "SESSION_DOMAIN=.4xhacker.com" >> .env
            echo "CORS_ALLOWED_ORIGINS=https://4xhacker.com,https://ealifecycle.4xhacker.com" >> .env
          fi
          
          # Ensure .htaccess file exists in public directory for Laravel routing
          if [ ! -f "public/.htaccess" ]; then
            echo "Creating .htaccess file for Laravel routing"
            echo "<IfModule mod_rewrite.c>" > public/.htaccess
            echo "    <IfModule mod_negotiation.c>" >> public/.htaccess
            echo "        Options -MultiViews -Indexes" >> public/.htaccess
            echo "    </IfModule>" >> public/.htaccess
            echo "" >> public/.htaccess
            echo "    RewriteEngine On" >> public/.htaccess
            echo "" >> public/.htaccess
            echo "    # Handle Authorization Header" >> public/.htaccess
            echo "    RewriteCond %{HTTP:Authorization} ." >> public/.htaccess
            echo "    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]" >> public/.htaccess
            echo "" >> public/.htaccess
            echo "    # Redirect Trailing Slashes If Not A Folder..." >> public/.htaccess
            echo "    RewriteCond %{REQUEST_FILENAME} !-d" >> public/.htaccess
            echo "    RewriteCond %{REQUEST_URI} (.+)/$" >> public/.htaccess
            echo "    RewriteRule ^ %1 [L,R=301]" >> public/.htaccess
            echo "" >> public/.htaccess
            echo "    # Send Requests To Front Controller..." >> public/.htaccess
            echo "    RewriteCond %{REQUEST_FILENAME} !-d" >> public/.htaccess
            echo "    RewriteCond %{REQUEST_FILENAME} !-f" >> public/.htaccess
            echo "    RewriteRule ^ index.php [L]" >> public/.htaccess
            echo "</IfModule>" >> public/.htaccess
          fi
          
          # Set proper permissions
          chmod -R 755 storage bootstrap/cache
          chmod -R 777 storage/logs storage/framework/cache storage/framework/sessions storage/framework/views
          
          # Install/update Composer dependencies with specific PHP version
          # Composer install is not needed on production because vendor is deployed from CI
          
          # Laravel deployment commands with specific PHP version
          echo "Clearing all Laravel caches before deployment..."
          $PHP_BINARY artisan optimize:clear || true # Clear all caches first

          echo "Caching configuration, routes, and views for production..."
          $PHP_BINARY artisan config:cache
          $PHP_BINARY artisan route:cache
          $PHP_BINARY artisan view:cache
          
          echo "Running database migrations..."
          $PHP_BINARY artisan migrate --force
          
          # Verify all migrations ran successfully
          echo "=== Verifying all migrations completed successfully ==="
          PENDING_MIGRATIONS=$($PHP_BINARY artisan migrate:status | grep "Pending" | wc -l)
          if [ $PENDING_MIGRATIONS -gt 0 ]; then
            echo "❌ ERROR: $PENDING_MIGRATIONS migrations are still pending!"
            echo "=== Pending migrations ==="
            $PHP_BINARY artisan migrate:status | grep "Pending"
            echo "=== Attempting to run pending migrations individually ==="
            
            # Try to run pending migrations one by one and report which ones fail
            $PHP_BINARY artisan migrate:status | grep "Pending" | while read -r line; do
              MIGRATION_NAME=$(echo "$line" | awk '{print $1}')
              echo "Attempting to run: $MIGRATION_NAME"
              if $PHP_BINARY artisan migrate --path=database/migrations/${MIGRATION_NAME}.php --force 2>/dev/null; then
                echo "✅ Successfully ran: $MIGRATION_NAME"
              else
                echo "❌ Failed to run: $MIGRATION_NAME"
                # Don't exit on individual migration failure, continue with deployment
              fi
            done
          else
            echo "✅ All migrations completed successfully!"
          fi
          
          # Final migration status check
          echo "=== Final migration status ==="
          $PHP_BINARY artisan migrate:status
          
          echo "Seeding database with default data..."
          $PHP_BINARY artisan db:seed --force
          
          echo "Final cache optimization and cleanup..."
          # Clear any problematic caches that might cause 405 errors
          $PHP_BINARY artisan config:clear
          $PHP_BINARY artisan route:clear
          # Keep view and config caches cleared to prevent 405 issues

          # Check for SQL/database errors in the Laravel log after seeding
          if grep -i 'SQL error' storage/logs/laravel.log; then
            echo '❌ Database seeding or migration error detected in laravel.log! Failing deployment.'
            exit 1
          fi

          echo "Setting final permissions..."
          chmod -R 755 public/
          chmod 644 public/index.php
          
          # Create symlink to web directory if it doesn't exist
          if [ ! -L "${{ secrets.DREAMHOST_PATH }}/4xhacker.com/ealifecycle" ]; then
            ln -s ${{ secrets.DREAMHOST_PATH }}/ealifecycle/public ${{ secrets.DREAMHOST_PATH }}/4xhacker.com/ealifecycle
          fi
          
          echo "Deployment completed successfully!"
          
    - name: Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        script: |
          cd ${{ secrets.DREAMHOST_PATH }}
          
          # Restore environment files from backup if they exist
          if [ -f "/tmp/env-production-backup" ]; then
            echo "Restoring .env.production from backup during rollback"
            cp /tmp/env-production-backup ealifecycle/.env.production 2>/dev/null || true
            rm /tmp/env-production-backup
          fi
          
          if [ -f "/tmp/env-backup" ]; then
            echo "Restoring .env from backup during rollback"
            cp /tmp/env-backup ealifecycle/.env 2>/dev/null || true
            rm /tmp/env-backup
          fi
          
          # Perform rollback to previous version
          if [ -d "ealifecycle-backup" ]; then
            rm -rf ealifecycle
            mv ealifecycle-backup ealifecycle
            echo "Rollback completed - restored previous version"
          fi
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment to Dreamhost completed successfully!"
        else
          echo "❌ Deployment failed - check logs and rollback if necessary"
        fi 