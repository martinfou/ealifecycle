name: Deploy to Dreamhost

on:
  push:
    branches: [ master, main ]
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: prod  # Use the prod environment to access secrets
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, openssl, zip, unzip
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install PHP dependencies
      run: composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist
      
    - name: Install Node dependencies
      run: npm ci
      
    - name: Build assets
      run: npm run build
      
    - name: Create deployment archive
      run: |
        # Create staging directory for deployment
        mkdir -p deploy-staging
        
        # Copy files to staging, excluding development files
        rsync -av --progress . deploy-staging/ \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='.env.example' \
          --exclude='.env.local' \
          --exclude='.env.*.local' \
          --exclude='tests' \
          --exclude='storage/logs/*' \
          --exclude='storage/framework/cache/*' \
          --exclude='storage/framework/sessions/*' \
          --exclude='storage/framework/views/*' \
          --exclude='storage/app/public/*' \
          --exclude='README.md' \
          --exclude='CHANGELOG.md' \
          --exclude='TODO.md' \
          --exclude='phpunit.xml' \
          --exclude='.phpunit.cache' \
          --exclude='*.log' \
          --exclude='*.tmp' \
          --exclude='.DS_Store' \
          --exclude='Thumbs.db' \
          --exclude='deploy-staging'
        
        # Create tar archive from staging directory
        tar -czf deploy.tar.gz -C deploy-staging .
          
    - name: Deploy to Dreamhost via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        script: |
          # Navigate to your domain directory
          cd ${{ secrets.DREAMHOST_PATH }}
          
          # Create backup of current deployment
          if [ -d "ealifecycle" ]; then
            rm -rf ealifecycle-backup
            mv ealifecycle ealifecycle-backup
          fi
          
          # Create new deployment directory
          mkdir -p ealifecycle
          
    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        source: "deploy.tar.gz"
        target: "${{ secrets.DREAMHOST_PATH }}/ealifecycle/"
        
    - name: Extract and configure application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        script: |
          cd ${{ secrets.DREAMHOST_PATH }}/ealifecycle
          
          # Check and use PHP 8.4 if available on Dreamhost
          if command -v php8.4 &> /dev/null; then
            export PHP_BINARY=php8.4
            echo "Using PHP 8.4"
          elif command -v php8.3 &> /dev/null; then
            export PHP_BINARY=php8.3
            echo "Using PHP 8.3"
          elif command -v php8.2 &> /dev/null; then
            export PHP_BINARY=php8.2
            echo "Using PHP 8.2"
          else
            export PHP_BINARY=php
            echo "Using default PHP version"
          fi
          
          # Check PHP version meets requirements
          $PHP_BINARY -v
          
          # Extract deployment package
          tar -xzf deploy.tar.gz
          rm deploy.tar.gz
          
          # Set up environment file
          cp .env.production .env
          
          # Set proper permissions
          chmod -R 755 storage bootstrap/cache
          chmod -R 777 storage/logs storage/framework/cache storage/framework/sessions storage/framework/views
          
          # Install/update Composer dependencies with specific PHP version
          $PHP_BINARY $(which composer) install --optimize-autoloader --no-dev --no-interaction --ignore-platform-req=php
          
          # Laravel deployment commands with specific PHP version
          $PHP_BINARY artisan config:cache
          $PHP_BINARY artisan route:cache
          $PHP_BINARY artisan view:cache
          $PHP_BINARY artisan migrate --force
          
          # Clear any old caches
          $PHP_BINARY artisan config:clear
          $PHP_BINARY artisan cache:clear
          
          # Create symlink to web directory if it doesn't exist
          if [ ! -L "${{ secrets.DREAMHOST_PATH }}/4xhacker.com/ealifecycle" ]; then
            ln -s ${{ secrets.DREAMHOST_PATH }}/ealifecycle/public ${{ secrets.DREAMHOST_PATH }}/4xhacker.com/ealifecycle
          fi
          
          echo "Deployment completed successfully!"
          
    - name: Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DREAMHOST_HOST }}
        username: ${{ secrets.DREAMHOST_USERNAME }}
        key: ${{ secrets.DREAMHOST_SSH_KEY }}
        port: 22
        script: |
          cd ${{ secrets.DREAMHOST_PATH }}
          if [ -d "ealifecycle-backup" ]; then
            rm -rf ealifecycle
            mv ealifecycle-backup ealifecycle
            echo "Rollback completed - restored previous version"
          fi
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment to Dreamhost completed successfully!"
        else
          echo "❌ Deployment failed - check logs and rollback if necessary"
        fi 